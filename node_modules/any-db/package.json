{
  "name": "any-db",
  "version": "1.0.0-alpha2",
  "description": "Database-agnostic connection pooling, querying, and result sets",
  "main": "index.js",
  "scripts": {
    "prepublish": "cp ../*.md .",
    "test": "tap test/*.test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/grncdr/node-any-db.git"
  },
  "author": {
    "name": "Stephen Sugden"
  },
  "keywords": [
    "mysql",
    "postgres",
    "pg",
    "sqlite",
    "sqlite3"
  ],
  "license": "MIT",
  "dependencies": {
    "any-db-pool": ">= 0.0.6"
  },
  "devDependencies": {
    "any-db-sqlite3": "*",
    "any-db-postgres": "*",
    "any-db-mysql": "*"
  },
  "readme": "# Any-DB Project\n\n[![Build Status](https://secure.travis-ci.org/grncdr/node-any-db.png?branch=master)](http://travis-ci.org/grncdr/node-any-db)\n\n_The less-opinionated Node.js database abstraction layer_\n\n## [ANN] v1.0.0-alpha1 released\n\nAny-DB 1.0 significantly restructures the various `any-db-*` modules. If you\nare updating from a previous version you *will* need to update `package.json`.\n\n**Applications** should replace an `any-db` dependency with one or more\ndependencies on `any-db-<adapter>` where `adapter` can be `mysql`, `postgres`,\nor `sqlite3`. With this change, a direct dependency on an database driver\npackage (such as `mysql`) is no longer *required*, though you can continue to\nuse one if you like.\n\nAll of the adapter libraries have `any-db` as a *peerDependency* which means\nthat `any-db` will be pulled in transitively as a dependency on the same level\nas the adapter.\n\n**Libraries** should move their `any-db` dependency to `peerDependencies`,\neven though things may appear to operate correctly without doing so. If your\nlibrary depends on a database connection (e.g. for tests) you should also add\na *devDependency* on the corresponding `any-db-<adapter>` library.\n\n## Synopsis\n\n(There's also detailed [API][API] documentation available)\n\n    var anyDB = require('any-db')\n    var dbURL = 'driver://user:pass@hostname/database'\n    \nEstablish a connection:\n\n    var conn = anyDB.createConnection(dbURL)  // Takes an optional callback\n    \nMake queries:\n\n    var sql = 'SELECT * FROM my_table'\n    conn.query(sql).on('row', function (row) {})  // evented\n    conn.query(sql, function (error, result) {})  // or callback\n    \nUse bound parameters:\n\n    sql += ' WHERE my_column = ?'\n    conn.query(sql, [42]).on('row', ...)           // again, evented\n    conn.query(sql, [42], function (err, res) {})  // or callback\n\nClose a connection:\n\n    conn.end()\n    \nStart a transaction:\n\n    var tx = conn.begin()             // Can also take a callback\n    tx.on('error', function (err) {}) // Emitted for unhandled query errors\n    tx.query(...)                     // same interface as connections, plus...\n    tx.commit()                       // takes an optional callback for errors\n    tx.rollback()                     // this too\n    \nCreate a connection pool that maintains 2-20 connections\n\n    var pool = anyDB.createPool(dbURL, {min: 2, max: 20})\n    \n    pool.query(...)       // perform a single query, same API as connection\n    var tx = pool.begin() // start a transaction, again, same API as connection\n    pool.close()          // close the pool (call when your app should exit)\n\n## Description\n\nThe purpose of this library is to provide a consistent API for the commonly used\nfunctionality of SQL database drivers, while avoiding altering driver behaviour\nas much as possible.\n\n### Things it does\n\n * Supports MySQL, Postgres, and SQLite3 as equally as possible. (More driver\n\t support is very much welcomed!)\n * Parses connection parameters from URLs: `driver://user:pass@host/database`\n * Streams results or gets them all at once, using an [api][query] almost\n\t identical to the existing interfaces of the MySQL and Postgres drivers.\n * A simple, solid, [connection pool][pool] with the ability to execute queries\n\t directly on a pool for auto-release behaviour. E.g. - this will never leak\n\t connections: `pool.query(\"SELECT 1\", function (err, results) { ... })`\n * Stateful [transaction objects][tx] for managing database transactions.\n\n### Things it might do (feedback needed!)\n\n * Provide a common result set API.\n\n### Things it will never do\n\n * Add it's own query helper methods like `.first` or `.fetchAll`\n * Include any sort of SQL string building. You might want to try my other library\n\t [gesundheit](https://github.com/BetSmartMedia/gesundheit), or one of the many\n\t [alternatives](https://encrypted.google.com/search?q=sql&q=site:npmjs.org&hl=en)\n\t for that. _(send me pull requests to list your libs here)_\n\n## Installation\n\n    npm install --save any-db-{pg,mysql,sqlite3}\n\n## License\n\nMIT\n\n[API]:   any-db/API.md\n[query]: any-db/API.md#query\n[pool]:  any-db/API.md#exportscreatepool\n[tx]:    any-db/API.md#transaction\n",
  "readmeFilename": "README.md",
  "_id": "any-db@1.0.0-alpha2",
  "dist": {
    "shasum": "4a6112f60262bbd21452032c5d806c237dd8403d"
  },
  "_from": "any-db"
}
